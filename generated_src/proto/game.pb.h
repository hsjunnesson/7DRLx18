// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fgame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fgame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fgame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fgame_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fgame_2eproto;
namespace game {
class ActionBindEntry;
struct ActionBindEntryDefaultTypeInternal;
extern ActionBindEntryDefaultTypeInternal _ActionBindEntry_default_instance_;
class ActionBinds;
struct ActionBindsDefaultTypeInternal;
extern ActionBindsDefaultTypeInternal _ActionBinds_default_instance_;
class DungenParams;
struct DungenParamsDefaultTypeInternal;
extern DungenParamsDefaultTypeInternal _DungenParams_default_instance_;
class GameParams;
struct GameParamsDefaultTypeInternal;
extern GameParamsDefaultTypeInternal _GameParams_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::ActionBindEntry* Arena::CreateMaybeMessage<::game::ActionBindEntry>(Arena*);
template<> ::game::ActionBinds* Arena::CreateMaybeMessage<::game::ActionBinds>(Arena*);
template<> ::game::DungenParams* Arena::CreateMaybeMessage<::game::DungenParams>(Arena*);
template<> ::game::GameParams* Arena::CreateMaybeMessage<::game::GameParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

enum ActionBindEntry_Action : int {
  ActionBindEntry_Action_ACTION_UNKNOWN = 0,
  ActionBindEntry_Action_QUIT = 1,
  ActionBindEntry_Action_MENU = 2,
  ActionBindEntry_Action_EDITOR = 3,
  ActionBindEntry_Action_MOVE_N = 4,
  ActionBindEntry_Action_MOVE_NE = 5,
  ActionBindEntry_Action_MOVE_E = 6,
  ActionBindEntry_Action_MOVE_SE = 7,
  ActionBindEntry_Action_MOVE_S = 8,
  ActionBindEntry_Action_MOVE_SW = 9,
  ActionBindEntry_Action_MOVE_W = 10,
  ActionBindEntry_Action_MOVE_NW = 11,
  ActionBindEntry_Action_INTERACT = 12,
  ActionBindEntry_Action_WAIT = 13,
  ActionBindEntry_Action_SHOW_IMGUI_DEMO = 99,
  ActionBindEntry_Action_ActionBindEntry_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActionBindEntry_Action_ActionBindEntry_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActionBindEntry_Action_IsValid(int value);
constexpr ActionBindEntry_Action ActionBindEntry_Action_Action_MIN = ActionBindEntry_Action_ACTION_UNKNOWN;
constexpr ActionBindEntry_Action ActionBindEntry_Action_Action_MAX = ActionBindEntry_Action_SHOW_IMGUI_DEMO;
constexpr int ActionBindEntry_Action_Action_ARRAYSIZE = ActionBindEntry_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionBindEntry_Action_descriptor();
template<typename T>
inline const std::string& ActionBindEntry_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionBindEntry_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionBindEntry_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionBindEntry_Action_descriptor(), enum_t_value);
}
inline bool ActionBindEntry_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActionBindEntry_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionBindEntry_Action>(
    ActionBindEntry_Action_descriptor(), name, value);
}
enum ActionBindEntry_Bind : int {
  ActionBindEntry_Bind_BIND_UNKNOWN = 0,
  ActionBindEntry_Bind_KEY_SPACE = 32,
  ActionBindEntry_Bind_KEY_APOSTROPHE = 39,
  ActionBindEntry_Bind_KEY_COMMA = 44,
  ActionBindEntry_Bind_KEY_MINUS = 45,
  ActionBindEntry_Bind_KEY_PERIOD = 46,
  ActionBindEntry_Bind_KEY_SLASH = 47,
  ActionBindEntry_Bind_KEY_0 = 48,
  ActionBindEntry_Bind_KEY_1 = 49,
  ActionBindEntry_Bind_KEY_2 = 50,
  ActionBindEntry_Bind_KEY_3 = 51,
  ActionBindEntry_Bind_KEY_4 = 52,
  ActionBindEntry_Bind_KEY_5 = 53,
  ActionBindEntry_Bind_KEY_6 = 54,
  ActionBindEntry_Bind_KEY_7 = 55,
  ActionBindEntry_Bind_KEY_8 = 56,
  ActionBindEntry_Bind_KEY_9 = 57,
  ActionBindEntry_Bind_KEY_SEMICOLON = 59,
  ActionBindEntry_Bind_KEY_EQUAL = 61,
  ActionBindEntry_Bind_KEY_A = 65,
  ActionBindEntry_Bind_KEY_B = 66,
  ActionBindEntry_Bind_KEY_C = 67,
  ActionBindEntry_Bind_KEY_D = 68,
  ActionBindEntry_Bind_KEY_E = 69,
  ActionBindEntry_Bind_KEY_F = 70,
  ActionBindEntry_Bind_KEY_G = 71,
  ActionBindEntry_Bind_KEY_H = 72,
  ActionBindEntry_Bind_KEY_I = 73,
  ActionBindEntry_Bind_KEY_J = 74,
  ActionBindEntry_Bind_KEY_K = 75,
  ActionBindEntry_Bind_KEY_L = 76,
  ActionBindEntry_Bind_KEY_M = 77,
  ActionBindEntry_Bind_KEY_N = 78,
  ActionBindEntry_Bind_KEY_O = 79,
  ActionBindEntry_Bind_KEY_P = 80,
  ActionBindEntry_Bind_KEY_Q = 81,
  ActionBindEntry_Bind_KEY_R = 82,
  ActionBindEntry_Bind_KEY_S = 83,
  ActionBindEntry_Bind_KEY_T = 84,
  ActionBindEntry_Bind_KEY_U = 85,
  ActionBindEntry_Bind_KEY_V = 86,
  ActionBindEntry_Bind_KEY_W = 87,
  ActionBindEntry_Bind_KEY_X = 88,
  ActionBindEntry_Bind_KEY_Y = 89,
  ActionBindEntry_Bind_KEY_Z = 90,
  ActionBindEntry_Bind_KEY_LEFT_BRACKET = 91,
  ActionBindEntry_Bind_KEY_BACKSLASH = 92,
  ActionBindEntry_Bind_KEY_RIGHT_BRACKET = 93,
  ActionBindEntry_Bind_KEY_GRAVE_ACCENT = 96,
  ActionBindEntry_Bind_KEY_ESCAPE = 256,
  ActionBindEntry_Bind_KEY_ENTER = 257,
  ActionBindEntry_Bind_KEY_TAB = 258,
  ActionBindEntry_Bind_KEY_BACKSPACE = 259,
  ActionBindEntry_Bind_KEY_INSERT = 260,
  ActionBindEntry_Bind_KEY_DELETE = 261,
  ActionBindEntry_Bind_KEY_RIGHT = 262,
  ActionBindEntry_Bind_KEY_LEFT = 263,
  ActionBindEntry_Bind_KEY_DOWN = 264,
  ActionBindEntry_Bind_KEY_UP = 265,
  ActionBindEntry_Bind_KEY_PAGE_UP = 266,
  ActionBindEntry_Bind_KEY_PAGE_DOWN = 267,
  ActionBindEntry_Bind_KEY_HOME = 268,
  ActionBindEntry_Bind_KEY_END = 269,
  ActionBindEntry_Bind_KEY_CAPS_LOCK = 280,
  ActionBindEntry_Bind_KEY_SCROLL_LOCK = 281,
  ActionBindEntry_Bind_KEY_NUM_LOCK = 282,
  ActionBindEntry_Bind_KEY_PRINT_SCREEN = 283,
  ActionBindEntry_Bind_KEY_PAUSE = 284,
  ActionBindEntry_Bind_KEY_F1 = 290,
  ActionBindEntry_Bind_KEY_F2 = 291,
  ActionBindEntry_Bind_KEY_F3 = 292,
  ActionBindEntry_Bind_KEY_F4 = 293,
  ActionBindEntry_Bind_KEY_F5 = 294,
  ActionBindEntry_Bind_KEY_F6 = 295,
  ActionBindEntry_Bind_KEY_F7 = 296,
  ActionBindEntry_Bind_KEY_F8 = 297,
  ActionBindEntry_Bind_KEY_F9 = 298,
  ActionBindEntry_Bind_KEY_F10 = 299,
  ActionBindEntry_Bind_KEY_F11 = 300,
  ActionBindEntry_Bind_KEY_F12 = 301,
  ActionBindEntry_Bind_KEY_F13 = 302,
  ActionBindEntry_Bind_KEY_F14 = 303,
  ActionBindEntry_Bind_KEY_F15 = 304,
  ActionBindEntry_Bind_KEY_F16 = 305,
  ActionBindEntry_Bind_KEY_F17 = 306,
  ActionBindEntry_Bind_KEY_F18 = 307,
  ActionBindEntry_Bind_KEY_F19 = 308,
  ActionBindEntry_Bind_KEY_F20 = 309,
  ActionBindEntry_Bind_KEY_F21 = 310,
  ActionBindEntry_Bind_KEY_F22 = 311,
  ActionBindEntry_Bind_KEY_F23 = 312,
  ActionBindEntry_Bind_KEY_F24 = 313,
  ActionBindEntry_Bind_KEY_F25 = 314,
  ActionBindEntry_Bind_KEY_KP_0 = 320,
  ActionBindEntry_Bind_KEY_KP_1 = 321,
  ActionBindEntry_Bind_KEY_KP_2 = 322,
  ActionBindEntry_Bind_KEY_KP_3 = 323,
  ActionBindEntry_Bind_KEY_KP_4 = 324,
  ActionBindEntry_Bind_KEY_KP_5 = 325,
  ActionBindEntry_Bind_KEY_KP_6 = 326,
  ActionBindEntry_Bind_KEY_KP_7 = 327,
  ActionBindEntry_Bind_KEY_KP_8 = 328,
  ActionBindEntry_Bind_KEY_KP_9 = 329,
  ActionBindEntry_Bind_KEY_KP_DECIMAL = 330,
  ActionBindEntry_Bind_KEY_KP_DIVIDE = 331,
  ActionBindEntry_Bind_KEY_KP_MULTIPLY = 332,
  ActionBindEntry_Bind_KEY_KP_SUBTRACT = 333,
  ActionBindEntry_Bind_KEY_KP_ADD = 334,
  ActionBindEntry_Bind_KEY_KP_ENTER = 335,
  ActionBindEntry_Bind_KEY_KP_EQUAL = 336,
  ActionBindEntry_Bind_KEY_LEFT_SHIFT = 340,
  ActionBindEntry_Bind_KEY_LEFT_CONTROL = 341,
  ActionBindEntry_Bind_KEY_LEFT_ALT = 342,
  ActionBindEntry_Bind_KEY_LEFT_SUPER = 343,
  ActionBindEntry_Bind_KEY_RIGHT_SHIFT = 344,
  ActionBindEntry_Bind_KEY_RIGHT_CONTROL = 345,
  ActionBindEntry_Bind_KEY_RIGHT_ALT = 346,
  ActionBindEntry_Bind_KEY_RIGHT_SUPER = 347,
  ActionBindEntry_Bind_ActionBindEntry_Bind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActionBindEntry_Bind_ActionBindEntry_Bind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActionBindEntry_Bind_IsValid(int value);
constexpr ActionBindEntry_Bind ActionBindEntry_Bind_Bind_MIN = ActionBindEntry_Bind_BIND_UNKNOWN;
constexpr ActionBindEntry_Bind ActionBindEntry_Bind_Bind_MAX = ActionBindEntry_Bind_KEY_RIGHT_SUPER;
constexpr int ActionBindEntry_Bind_Bind_ARRAYSIZE = ActionBindEntry_Bind_Bind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionBindEntry_Bind_descriptor();
template<typename T>
inline const std::string& ActionBindEntry_Bind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionBindEntry_Bind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionBindEntry_Bind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionBindEntry_Bind_descriptor(), enum_t_value);
}
inline bool ActionBindEntry_Bind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActionBindEntry_Bind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionBindEntry_Bind>(
    ActionBindEntry_Bind_descriptor(), name, value);
}
// ===================================================================

class ActionBindEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.ActionBindEntry) */ {
 public:
  inline ActionBindEntry() : ActionBindEntry(nullptr) {}
  ~ActionBindEntry() override;
  explicit constexpr ActionBindEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionBindEntry(const ActionBindEntry& from);
  ActionBindEntry(ActionBindEntry&& from) noexcept
    : ActionBindEntry() {
    *this = ::std::move(from);
  }

  inline ActionBindEntry& operator=(const ActionBindEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionBindEntry& operator=(ActionBindEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActionBindEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionBindEntry* internal_default_instance() {
    return reinterpret_cast<const ActionBindEntry*>(
               &_ActionBindEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActionBindEntry& a, ActionBindEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionBindEntry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionBindEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionBindEntry* New() const final {
    return new ActionBindEntry();
  }

  ActionBindEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionBindEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActionBindEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActionBindEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionBindEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.ActionBindEntry";
  }
  protected:
  explicit ActionBindEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ActionBindEntry_Action Action;
  static constexpr Action ACTION_UNKNOWN =
    ActionBindEntry_Action_ACTION_UNKNOWN;
  static constexpr Action QUIT =
    ActionBindEntry_Action_QUIT;
  static constexpr Action MENU =
    ActionBindEntry_Action_MENU;
  static constexpr Action EDITOR =
    ActionBindEntry_Action_EDITOR;
  static constexpr Action MOVE_N =
    ActionBindEntry_Action_MOVE_N;
  static constexpr Action MOVE_NE =
    ActionBindEntry_Action_MOVE_NE;
  static constexpr Action MOVE_E =
    ActionBindEntry_Action_MOVE_E;
  static constexpr Action MOVE_SE =
    ActionBindEntry_Action_MOVE_SE;
  static constexpr Action MOVE_S =
    ActionBindEntry_Action_MOVE_S;
  static constexpr Action MOVE_SW =
    ActionBindEntry_Action_MOVE_SW;
  static constexpr Action MOVE_W =
    ActionBindEntry_Action_MOVE_W;
  static constexpr Action MOVE_NW =
    ActionBindEntry_Action_MOVE_NW;
  static constexpr Action INTERACT =
    ActionBindEntry_Action_INTERACT;
  static constexpr Action WAIT =
    ActionBindEntry_Action_WAIT;
  static constexpr Action SHOW_IMGUI_DEMO =
    ActionBindEntry_Action_SHOW_IMGUI_DEMO;
  static inline bool Action_IsValid(int value) {
    return ActionBindEntry_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    ActionBindEntry_Action_Action_MIN;
  static constexpr Action Action_MAX =
    ActionBindEntry_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    ActionBindEntry_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return ActionBindEntry_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return ActionBindEntry_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return ActionBindEntry_Action_Parse(name, value);
  }

  typedef ActionBindEntry_Bind Bind;
  static constexpr Bind BIND_UNKNOWN =
    ActionBindEntry_Bind_BIND_UNKNOWN;
  static constexpr Bind KEY_SPACE =
    ActionBindEntry_Bind_KEY_SPACE;
  static constexpr Bind KEY_APOSTROPHE =
    ActionBindEntry_Bind_KEY_APOSTROPHE;
  static constexpr Bind KEY_COMMA =
    ActionBindEntry_Bind_KEY_COMMA;
  static constexpr Bind KEY_MINUS =
    ActionBindEntry_Bind_KEY_MINUS;
  static constexpr Bind KEY_PERIOD =
    ActionBindEntry_Bind_KEY_PERIOD;
  static constexpr Bind KEY_SLASH =
    ActionBindEntry_Bind_KEY_SLASH;
  static constexpr Bind KEY_0 =
    ActionBindEntry_Bind_KEY_0;
  static constexpr Bind KEY_1 =
    ActionBindEntry_Bind_KEY_1;
  static constexpr Bind KEY_2 =
    ActionBindEntry_Bind_KEY_2;
  static constexpr Bind KEY_3 =
    ActionBindEntry_Bind_KEY_3;
  static constexpr Bind KEY_4 =
    ActionBindEntry_Bind_KEY_4;
  static constexpr Bind KEY_5 =
    ActionBindEntry_Bind_KEY_5;
  static constexpr Bind KEY_6 =
    ActionBindEntry_Bind_KEY_6;
  static constexpr Bind KEY_7 =
    ActionBindEntry_Bind_KEY_7;
  static constexpr Bind KEY_8 =
    ActionBindEntry_Bind_KEY_8;
  static constexpr Bind KEY_9 =
    ActionBindEntry_Bind_KEY_9;
  static constexpr Bind KEY_SEMICOLON =
    ActionBindEntry_Bind_KEY_SEMICOLON;
  static constexpr Bind KEY_EQUAL =
    ActionBindEntry_Bind_KEY_EQUAL;
  static constexpr Bind KEY_A =
    ActionBindEntry_Bind_KEY_A;
  static constexpr Bind KEY_B =
    ActionBindEntry_Bind_KEY_B;
  static constexpr Bind KEY_C =
    ActionBindEntry_Bind_KEY_C;
  static constexpr Bind KEY_D =
    ActionBindEntry_Bind_KEY_D;
  static constexpr Bind KEY_E =
    ActionBindEntry_Bind_KEY_E;
  static constexpr Bind KEY_F =
    ActionBindEntry_Bind_KEY_F;
  static constexpr Bind KEY_G =
    ActionBindEntry_Bind_KEY_G;
  static constexpr Bind KEY_H =
    ActionBindEntry_Bind_KEY_H;
  static constexpr Bind KEY_I =
    ActionBindEntry_Bind_KEY_I;
  static constexpr Bind KEY_J =
    ActionBindEntry_Bind_KEY_J;
  static constexpr Bind KEY_K =
    ActionBindEntry_Bind_KEY_K;
  static constexpr Bind KEY_L =
    ActionBindEntry_Bind_KEY_L;
  static constexpr Bind KEY_M =
    ActionBindEntry_Bind_KEY_M;
  static constexpr Bind KEY_N =
    ActionBindEntry_Bind_KEY_N;
  static constexpr Bind KEY_O =
    ActionBindEntry_Bind_KEY_O;
  static constexpr Bind KEY_P =
    ActionBindEntry_Bind_KEY_P;
  static constexpr Bind KEY_Q =
    ActionBindEntry_Bind_KEY_Q;
  static constexpr Bind KEY_R =
    ActionBindEntry_Bind_KEY_R;
  static constexpr Bind KEY_S =
    ActionBindEntry_Bind_KEY_S;
  static constexpr Bind KEY_T =
    ActionBindEntry_Bind_KEY_T;
  static constexpr Bind KEY_U =
    ActionBindEntry_Bind_KEY_U;
  static constexpr Bind KEY_V =
    ActionBindEntry_Bind_KEY_V;
  static constexpr Bind KEY_W =
    ActionBindEntry_Bind_KEY_W;
  static constexpr Bind KEY_X =
    ActionBindEntry_Bind_KEY_X;
  static constexpr Bind KEY_Y =
    ActionBindEntry_Bind_KEY_Y;
  static constexpr Bind KEY_Z =
    ActionBindEntry_Bind_KEY_Z;
  static constexpr Bind KEY_LEFT_BRACKET =
    ActionBindEntry_Bind_KEY_LEFT_BRACKET;
  static constexpr Bind KEY_BACKSLASH =
    ActionBindEntry_Bind_KEY_BACKSLASH;
  static constexpr Bind KEY_RIGHT_BRACKET =
    ActionBindEntry_Bind_KEY_RIGHT_BRACKET;
  static constexpr Bind KEY_GRAVE_ACCENT =
    ActionBindEntry_Bind_KEY_GRAVE_ACCENT;
  static constexpr Bind KEY_ESCAPE =
    ActionBindEntry_Bind_KEY_ESCAPE;
  static constexpr Bind KEY_ENTER =
    ActionBindEntry_Bind_KEY_ENTER;
  static constexpr Bind KEY_TAB =
    ActionBindEntry_Bind_KEY_TAB;
  static constexpr Bind KEY_BACKSPACE =
    ActionBindEntry_Bind_KEY_BACKSPACE;
  static constexpr Bind KEY_INSERT =
    ActionBindEntry_Bind_KEY_INSERT;
  static constexpr Bind KEY_DELETE =
    ActionBindEntry_Bind_KEY_DELETE;
  static constexpr Bind KEY_RIGHT =
    ActionBindEntry_Bind_KEY_RIGHT;
  static constexpr Bind KEY_LEFT =
    ActionBindEntry_Bind_KEY_LEFT;
  static constexpr Bind KEY_DOWN =
    ActionBindEntry_Bind_KEY_DOWN;
  static constexpr Bind KEY_UP =
    ActionBindEntry_Bind_KEY_UP;
  static constexpr Bind KEY_PAGE_UP =
    ActionBindEntry_Bind_KEY_PAGE_UP;
  static constexpr Bind KEY_PAGE_DOWN =
    ActionBindEntry_Bind_KEY_PAGE_DOWN;
  static constexpr Bind KEY_HOME =
    ActionBindEntry_Bind_KEY_HOME;
  static constexpr Bind KEY_END =
    ActionBindEntry_Bind_KEY_END;
  static constexpr Bind KEY_CAPS_LOCK =
    ActionBindEntry_Bind_KEY_CAPS_LOCK;
  static constexpr Bind KEY_SCROLL_LOCK =
    ActionBindEntry_Bind_KEY_SCROLL_LOCK;
  static constexpr Bind KEY_NUM_LOCK =
    ActionBindEntry_Bind_KEY_NUM_LOCK;
  static constexpr Bind KEY_PRINT_SCREEN =
    ActionBindEntry_Bind_KEY_PRINT_SCREEN;
  static constexpr Bind KEY_PAUSE =
    ActionBindEntry_Bind_KEY_PAUSE;
  static constexpr Bind KEY_F1 =
    ActionBindEntry_Bind_KEY_F1;
  static constexpr Bind KEY_F2 =
    ActionBindEntry_Bind_KEY_F2;
  static constexpr Bind KEY_F3 =
    ActionBindEntry_Bind_KEY_F3;
  static constexpr Bind KEY_F4 =
    ActionBindEntry_Bind_KEY_F4;
  static constexpr Bind KEY_F5 =
    ActionBindEntry_Bind_KEY_F5;
  static constexpr Bind KEY_F6 =
    ActionBindEntry_Bind_KEY_F6;
  static constexpr Bind KEY_F7 =
    ActionBindEntry_Bind_KEY_F7;
  static constexpr Bind KEY_F8 =
    ActionBindEntry_Bind_KEY_F8;
  static constexpr Bind KEY_F9 =
    ActionBindEntry_Bind_KEY_F9;
  static constexpr Bind KEY_F10 =
    ActionBindEntry_Bind_KEY_F10;
  static constexpr Bind KEY_F11 =
    ActionBindEntry_Bind_KEY_F11;
  static constexpr Bind KEY_F12 =
    ActionBindEntry_Bind_KEY_F12;
  static constexpr Bind KEY_F13 =
    ActionBindEntry_Bind_KEY_F13;
  static constexpr Bind KEY_F14 =
    ActionBindEntry_Bind_KEY_F14;
  static constexpr Bind KEY_F15 =
    ActionBindEntry_Bind_KEY_F15;
  static constexpr Bind KEY_F16 =
    ActionBindEntry_Bind_KEY_F16;
  static constexpr Bind KEY_F17 =
    ActionBindEntry_Bind_KEY_F17;
  static constexpr Bind KEY_F18 =
    ActionBindEntry_Bind_KEY_F18;
  static constexpr Bind KEY_F19 =
    ActionBindEntry_Bind_KEY_F19;
  static constexpr Bind KEY_F20 =
    ActionBindEntry_Bind_KEY_F20;
  static constexpr Bind KEY_F21 =
    ActionBindEntry_Bind_KEY_F21;
  static constexpr Bind KEY_F22 =
    ActionBindEntry_Bind_KEY_F22;
  static constexpr Bind KEY_F23 =
    ActionBindEntry_Bind_KEY_F23;
  static constexpr Bind KEY_F24 =
    ActionBindEntry_Bind_KEY_F24;
  static constexpr Bind KEY_F25 =
    ActionBindEntry_Bind_KEY_F25;
  static constexpr Bind KEY_KP_0 =
    ActionBindEntry_Bind_KEY_KP_0;
  static constexpr Bind KEY_KP_1 =
    ActionBindEntry_Bind_KEY_KP_1;
  static constexpr Bind KEY_KP_2 =
    ActionBindEntry_Bind_KEY_KP_2;
  static constexpr Bind KEY_KP_3 =
    ActionBindEntry_Bind_KEY_KP_3;
  static constexpr Bind KEY_KP_4 =
    ActionBindEntry_Bind_KEY_KP_4;
  static constexpr Bind KEY_KP_5 =
    ActionBindEntry_Bind_KEY_KP_5;
  static constexpr Bind KEY_KP_6 =
    ActionBindEntry_Bind_KEY_KP_6;
  static constexpr Bind KEY_KP_7 =
    ActionBindEntry_Bind_KEY_KP_7;
  static constexpr Bind KEY_KP_8 =
    ActionBindEntry_Bind_KEY_KP_8;
  static constexpr Bind KEY_KP_9 =
    ActionBindEntry_Bind_KEY_KP_9;
  static constexpr Bind KEY_KP_DECIMAL =
    ActionBindEntry_Bind_KEY_KP_DECIMAL;
  static constexpr Bind KEY_KP_DIVIDE =
    ActionBindEntry_Bind_KEY_KP_DIVIDE;
  static constexpr Bind KEY_KP_MULTIPLY =
    ActionBindEntry_Bind_KEY_KP_MULTIPLY;
  static constexpr Bind KEY_KP_SUBTRACT =
    ActionBindEntry_Bind_KEY_KP_SUBTRACT;
  static constexpr Bind KEY_KP_ADD =
    ActionBindEntry_Bind_KEY_KP_ADD;
  static constexpr Bind KEY_KP_ENTER =
    ActionBindEntry_Bind_KEY_KP_ENTER;
  static constexpr Bind KEY_KP_EQUAL =
    ActionBindEntry_Bind_KEY_KP_EQUAL;
  static constexpr Bind KEY_LEFT_SHIFT =
    ActionBindEntry_Bind_KEY_LEFT_SHIFT;
  static constexpr Bind KEY_LEFT_CONTROL =
    ActionBindEntry_Bind_KEY_LEFT_CONTROL;
  static constexpr Bind KEY_LEFT_ALT =
    ActionBindEntry_Bind_KEY_LEFT_ALT;
  static constexpr Bind KEY_LEFT_SUPER =
    ActionBindEntry_Bind_KEY_LEFT_SUPER;
  static constexpr Bind KEY_RIGHT_SHIFT =
    ActionBindEntry_Bind_KEY_RIGHT_SHIFT;
  static constexpr Bind KEY_RIGHT_CONTROL =
    ActionBindEntry_Bind_KEY_RIGHT_CONTROL;
  static constexpr Bind KEY_RIGHT_ALT =
    ActionBindEntry_Bind_KEY_RIGHT_ALT;
  static constexpr Bind KEY_RIGHT_SUPER =
    ActionBindEntry_Bind_KEY_RIGHT_SUPER;
  static inline bool Bind_IsValid(int value) {
    return ActionBindEntry_Bind_IsValid(value);
  }
  static constexpr Bind Bind_MIN =
    ActionBindEntry_Bind_Bind_MIN;
  static constexpr Bind Bind_MAX =
    ActionBindEntry_Bind_Bind_MAX;
  static constexpr int Bind_ARRAYSIZE =
    ActionBindEntry_Bind_Bind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Bind_descriptor() {
    return ActionBindEntry_Bind_descriptor();
  }
  template<typename T>
  static inline const std::string& Bind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Bind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Bind_Name.");
    return ActionBindEntry_Bind_Name(enum_t_value);
  }
  static inline bool Bind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Bind* value) {
    return ActionBindEntry_Bind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kBindFieldNumber = 2,
  };
  // .game.ActionBindEntry.Action action = 1;
  void clear_action();
  ::game::ActionBindEntry_Action action() const;
  void set_action(::game::ActionBindEntry_Action value);
  private:
  ::game::ActionBindEntry_Action _internal_action() const;
  void _internal_set_action(::game::ActionBindEntry_Action value);
  public:

  // .game.ActionBindEntry.Bind bind = 2;
  void clear_bind();
  ::game::ActionBindEntry_Bind bind() const;
  void set_bind(::game::ActionBindEntry_Bind value);
  private:
  ::game::ActionBindEntry_Bind _internal_bind() const;
  void _internal_set_bind(::game::ActionBindEntry_Bind value);
  public:

  // @@protoc_insertion_point(class_scope:game.ActionBindEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int action_;
  int bind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fgame_2eproto;
};
// -------------------------------------------------------------------

class GameParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.GameParams) */ {
 public:
  inline GameParams() : GameParams(nullptr) {}
  ~GameParams() override;
  explicit constexpr GameParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameParams(const GameParams& from);
  GameParams(GameParams&& from) noexcept
    : GameParams() {
    *this = ::std::move(from);
  }

  inline GameParams& operator=(const GameParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameParams& operator=(GameParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameParams* internal_default_instance() {
    return reinterpret_cast<const GameParams*>(
               &_GameParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameParams& a, GameParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GameParams* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameParams* New() const final {
    return new GameParams();
  }

  GameParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.GameParams";
  }
  protected:
  explicit GameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameAtlasFilenameFieldNumber = 1,
    kDungenParamsFilenameFieldNumber = 2,
    kRoomTemplatesFilenameFieldNumber = 3,
    kMobTemplatesFilenameFieldNumber = 4,
    kTilesizeFieldNumber = 10,
  };
  // string game_atlas_filename = 1;
  void clear_game_atlas_filename();
  const std::string& game_atlas_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_atlas_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_atlas_filename();
  PROTOBUF_MUST_USE_RESULT std::string* release_game_atlas_filename();
  void set_allocated_game_atlas_filename(std::string* game_atlas_filename);
  private:
  const std::string& _internal_game_atlas_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_atlas_filename(const std::string& value);
  std::string* _internal_mutable_game_atlas_filename();
  public:

  // string dungen_params_filename = 2;
  void clear_dungen_params_filename();
  const std::string& dungen_params_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dungen_params_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dungen_params_filename();
  PROTOBUF_MUST_USE_RESULT std::string* release_dungen_params_filename();
  void set_allocated_dungen_params_filename(std::string* dungen_params_filename);
  private:
  const std::string& _internal_dungen_params_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dungen_params_filename(const std::string& value);
  std::string* _internal_mutable_dungen_params_filename();
  public:

  // string room_templates_filename = 3;
  void clear_room_templates_filename();
  const std::string& room_templates_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_templates_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_templates_filename();
  PROTOBUF_MUST_USE_RESULT std::string* release_room_templates_filename();
  void set_allocated_room_templates_filename(std::string* room_templates_filename);
  private:
  const std::string& _internal_room_templates_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_templates_filename(const std::string& value);
  std::string* _internal_mutable_room_templates_filename();
  public:

  // string mob_templates_filename = 4;
  void clear_mob_templates_filename();
  const std::string& mob_templates_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mob_templates_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mob_templates_filename();
  PROTOBUF_MUST_USE_RESULT std::string* release_mob_templates_filename();
  void set_allocated_mob_templates_filename(std::string* mob_templates_filename);
  private:
  const std::string& _internal_mob_templates_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mob_templates_filename(const std::string& value);
  std::string* _internal_mutable_mob_templates_filename();
  public:

  // int32 tilesize = 10;
  void clear_tilesize();
  ::PROTOBUF_NAMESPACE_ID::int32 tilesize() const;
  void set_tilesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tilesize() const;
  void _internal_set_tilesize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.GameParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_atlas_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dungen_params_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_templates_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mob_templates_filename_;
  ::PROTOBUF_NAMESPACE_ID::int32 tilesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fgame_2eproto;
};
// -------------------------------------------------------------------

class DungenParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.DungenParams) */ {
 public:
  inline DungenParams() : DungenParams(nullptr) {}
  ~DungenParams() override;
  explicit constexpr DungenParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DungenParams(const DungenParams& from);
  DungenParams(DungenParams&& from) noexcept
    : DungenParams() {
    *this = ::std::move(from);
  }

  inline DungenParams& operator=(const DungenParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DungenParams& operator=(DungenParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DungenParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DungenParams* internal_default_instance() {
    return reinterpret_cast<const DungenParams*>(
               &_DungenParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DungenParams& a, DungenParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DungenParams* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DungenParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DungenParams* New() const final {
    return new DungenParams();
  }

  DungenParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DungenParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DungenParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DungenParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DungenParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.DungenParams";
  }
  protected:
  explicit DungenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomCountFieldNumber = 1,
    kMapWidthFieldNumber = 2,
    kMapHeightFieldNumber = 3,
    kExpandChanceFieldNumber = 4,
  };
  // int32 room_count = 1;
  void clear_room_count();
  ::PROTOBUF_NAMESPACE_ID::int32 room_count() const;
  void set_room_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_count() const;
  void _internal_set_room_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_width = 2;
  void clear_map_width();
  ::PROTOBUF_NAMESPACE_ID::int32 map_width() const;
  void set_map_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_width() const;
  void _internal_set_map_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_height = 3;
  void clear_map_height();
  ::PROTOBUF_NAMESPACE_ID::int32 map_height() const;
  void set_map_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_height() const;
  void _internal_set_map_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expand_chance = 4;
  void clear_expand_chance();
  ::PROTOBUF_NAMESPACE_ID::int32 expand_chance() const;
  void set_expand_chance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expand_chance() const;
  void _internal_set_expand_chance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.DungenParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 expand_chance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fgame_2eproto;
};
// -------------------------------------------------------------------

class ActionBinds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.ActionBinds) */ {
 public:
  inline ActionBinds() : ActionBinds(nullptr) {}
  ~ActionBinds() override;
  explicit constexpr ActionBinds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionBinds(const ActionBinds& from);
  ActionBinds(ActionBinds&& from) noexcept
    : ActionBinds() {
    *this = ::std::move(from);
  }

  inline ActionBinds& operator=(const ActionBinds& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionBinds& operator=(ActionBinds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActionBinds& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionBinds* internal_default_instance() {
    return reinterpret_cast<const ActionBinds*>(
               &_ActionBinds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ActionBinds& a, ActionBinds& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionBinds* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionBinds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionBinds* New() const final {
    return new ActionBinds();
  }

  ActionBinds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionBinds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActionBinds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActionBinds& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionBinds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.ActionBinds";
  }
  protected:
  explicit ActionBinds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionBindsFieldNumber = 1,
  };
  // repeated .game.ActionBindEntry action_binds = 1;
  int action_binds_size() const;
  private:
  int _internal_action_binds_size() const;
  public:
  void clear_action_binds();
  ::game::ActionBindEntry* mutable_action_binds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ActionBindEntry >*
      mutable_action_binds();
  private:
  const ::game::ActionBindEntry& _internal_action_binds(int index) const;
  ::game::ActionBindEntry* _internal_add_action_binds();
  public:
  const ::game::ActionBindEntry& action_binds(int index) const;
  ::game::ActionBindEntry* add_action_binds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ActionBindEntry >&
      action_binds() const;

  // @@protoc_insertion_point(class_scope:game.ActionBinds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ActionBindEntry > action_binds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fgame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActionBindEntry

// .game.ActionBindEntry.Action action = 1;
inline void ActionBindEntry::clear_action() {
  action_ = 0;
}
inline ::game::ActionBindEntry_Action ActionBindEntry::_internal_action() const {
  return static_cast< ::game::ActionBindEntry_Action >(action_);
}
inline ::game::ActionBindEntry_Action ActionBindEntry::action() const {
  // @@protoc_insertion_point(field_get:game.ActionBindEntry.action)
  return _internal_action();
}
inline void ActionBindEntry::_internal_set_action(::game::ActionBindEntry_Action value) {
  
  action_ = value;
}
inline void ActionBindEntry::set_action(::game::ActionBindEntry_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:game.ActionBindEntry.action)
}

// .game.ActionBindEntry.Bind bind = 2;
inline void ActionBindEntry::clear_bind() {
  bind_ = 0;
}
inline ::game::ActionBindEntry_Bind ActionBindEntry::_internal_bind() const {
  return static_cast< ::game::ActionBindEntry_Bind >(bind_);
}
inline ::game::ActionBindEntry_Bind ActionBindEntry::bind() const {
  // @@protoc_insertion_point(field_get:game.ActionBindEntry.bind)
  return _internal_bind();
}
inline void ActionBindEntry::_internal_set_bind(::game::ActionBindEntry_Bind value) {
  
  bind_ = value;
}
inline void ActionBindEntry::set_bind(::game::ActionBindEntry_Bind value) {
  _internal_set_bind(value);
  // @@protoc_insertion_point(field_set:game.ActionBindEntry.bind)
}

// -------------------------------------------------------------------

// GameParams

// string game_atlas_filename = 1;
inline void GameParams::clear_game_atlas_filename() {
  game_atlas_filename_.ClearToEmpty();
}
inline const std::string& GameParams::game_atlas_filename() const {
  // @@protoc_insertion_point(field_get:game.GameParams.game_atlas_filename)
  return _internal_game_atlas_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameParams::set_game_atlas_filename(ArgT0&& arg0, ArgT... args) {
 
 game_atlas_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.GameParams.game_atlas_filename)
}
inline std::string* GameParams::mutable_game_atlas_filename() {
  std::string* _s = _internal_mutable_game_atlas_filename();
  // @@protoc_insertion_point(field_mutable:game.GameParams.game_atlas_filename)
  return _s;
}
inline const std::string& GameParams::_internal_game_atlas_filename() const {
  return game_atlas_filename_.Get();
}
inline void GameParams::_internal_set_game_atlas_filename(const std::string& value) {
  
  game_atlas_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameParams::_internal_mutable_game_atlas_filename() {
  
  return game_atlas_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameParams::release_game_atlas_filename() {
  // @@protoc_insertion_point(field_release:game.GameParams.game_atlas_filename)
  return game_atlas_filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameParams::set_allocated_game_atlas_filename(std::string* game_atlas_filename) {
  if (game_atlas_filename != nullptr) {
    
  } else {
    
  }
  game_atlas_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_atlas_filename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:game.GameParams.game_atlas_filename)
}

// string dungen_params_filename = 2;
inline void GameParams::clear_dungen_params_filename() {
  dungen_params_filename_.ClearToEmpty();
}
inline const std::string& GameParams::dungen_params_filename() const {
  // @@protoc_insertion_point(field_get:game.GameParams.dungen_params_filename)
  return _internal_dungen_params_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameParams::set_dungen_params_filename(ArgT0&& arg0, ArgT... args) {
 
 dungen_params_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.GameParams.dungen_params_filename)
}
inline std::string* GameParams::mutable_dungen_params_filename() {
  std::string* _s = _internal_mutable_dungen_params_filename();
  // @@protoc_insertion_point(field_mutable:game.GameParams.dungen_params_filename)
  return _s;
}
inline const std::string& GameParams::_internal_dungen_params_filename() const {
  return dungen_params_filename_.Get();
}
inline void GameParams::_internal_set_dungen_params_filename(const std::string& value) {
  
  dungen_params_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameParams::_internal_mutable_dungen_params_filename() {
  
  return dungen_params_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameParams::release_dungen_params_filename() {
  // @@protoc_insertion_point(field_release:game.GameParams.dungen_params_filename)
  return dungen_params_filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameParams::set_allocated_dungen_params_filename(std::string* dungen_params_filename) {
  if (dungen_params_filename != nullptr) {
    
  } else {
    
  }
  dungen_params_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dungen_params_filename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:game.GameParams.dungen_params_filename)
}

// string room_templates_filename = 3;
inline void GameParams::clear_room_templates_filename() {
  room_templates_filename_.ClearToEmpty();
}
inline const std::string& GameParams::room_templates_filename() const {
  // @@protoc_insertion_point(field_get:game.GameParams.room_templates_filename)
  return _internal_room_templates_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameParams::set_room_templates_filename(ArgT0&& arg0, ArgT... args) {
 
 room_templates_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.GameParams.room_templates_filename)
}
inline std::string* GameParams::mutable_room_templates_filename() {
  std::string* _s = _internal_mutable_room_templates_filename();
  // @@protoc_insertion_point(field_mutable:game.GameParams.room_templates_filename)
  return _s;
}
inline const std::string& GameParams::_internal_room_templates_filename() const {
  return room_templates_filename_.Get();
}
inline void GameParams::_internal_set_room_templates_filename(const std::string& value) {
  
  room_templates_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameParams::_internal_mutable_room_templates_filename() {
  
  return room_templates_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameParams::release_room_templates_filename() {
  // @@protoc_insertion_point(field_release:game.GameParams.room_templates_filename)
  return room_templates_filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameParams::set_allocated_room_templates_filename(std::string* room_templates_filename) {
  if (room_templates_filename != nullptr) {
    
  } else {
    
  }
  room_templates_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_templates_filename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:game.GameParams.room_templates_filename)
}

// string mob_templates_filename = 4;
inline void GameParams::clear_mob_templates_filename() {
  mob_templates_filename_.ClearToEmpty();
}
inline const std::string& GameParams::mob_templates_filename() const {
  // @@protoc_insertion_point(field_get:game.GameParams.mob_templates_filename)
  return _internal_mob_templates_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameParams::set_mob_templates_filename(ArgT0&& arg0, ArgT... args) {
 
 mob_templates_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.GameParams.mob_templates_filename)
}
inline std::string* GameParams::mutable_mob_templates_filename() {
  std::string* _s = _internal_mutable_mob_templates_filename();
  // @@protoc_insertion_point(field_mutable:game.GameParams.mob_templates_filename)
  return _s;
}
inline const std::string& GameParams::_internal_mob_templates_filename() const {
  return mob_templates_filename_.Get();
}
inline void GameParams::_internal_set_mob_templates_filename(const std::string& value) {
  
  mob_templates_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameParams::_internal_mutable_mob_templates_filename() {
  
  return mob_templates_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameParams::release_mob_templates_filename() {
  // @@protoc_insertion_point(field_release:game.GameParams.mob_templates_filename)
  return mob_templates_filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameParams::set_allocated_mob_templates_filename(std::string* mob_templates_filename) {
  if (mob_templates_filename != nullptr) {
    
  } else {
    
  }
  mob_templates_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mob_templates_filename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:game.GameParams.mob_templates_filename)
}

// int32 tilesize = 10;
inline void GameParams::clear_tilesize() {
  tilesize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameParams::_internal_tilesize() const {
  return tilesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameParams::tilesize() const {
  // @@protoc_insertion_point(field_get:game.GameParams.tilesize)
  return _internal_tilesize();
}
inline void GameParams::_internal_set_tilesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tilesize_ = value;
}
inline void GameParams::set_tilesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tilesize(value);
  // @@protoc_insertion_point(field_set:game.GameParams.tilesize)
}

// -------------------------------------------------------------------

// DungenParams

// int32 room_count = 1;
inline void DungenParams::clear_room_count() {
  room_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DungenParams::_internal_room_count() const {
  return room_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DungenParams::room_count() const {
  // @@protoc_insertion_point(field_get:game.DungenParams.room_count)
  return _internal_room_count();
}
inline void DungenParams::_internal_set_room_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_count_ = value;
}
inline void DungenParams::set_room_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_count(value);
  // @@protoc_insertion_point(field_set:game.DungenParams.room_count)
}

// int32 map_width = 2;
inline void DungenParams::clear_map_width() {
  map_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DungenParams::_internal_map_width() const {
  return map_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DungenParams::map_width() const {
  // @@protoc_insertion_point(field_get:game.DungenParams.map_width)
  return _internal_map_width();
}
inline void DungenParams::_internal_set_map_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_width_ = value;
}
inline void DungenParams::set_map_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_width(value);
  // @@protoc_insertion_point(field_set:game.DungenParams.map_width)
}

// int32 map_height = 3;
inline void DungenParams::clear_map_height() {
  map_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DungenParams::_internal_map_height() const {
  return map_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DungenParams::map_height() const {
  // @@protoc_insertion_point(field_get:game.DungenParams.map_height)
  return _internal_map_height();
}
inline void DungenParams::_internal_set_map_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_height_ = value;
}
inline void DungenParams::set_map_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_height(value);
  // @@protoc_insertion_point(field_set:game.DungenParams.map_height)
}

// int32 expand_chance = 4;
inline void DungenParams::clear_expand_chance() {
  expand_chance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DungenParams::_internal_expand_chance() const {
  return expand_chance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DungenParams::expand_chance() const {
  // @@protoc_insertion_point(field_get:game.DungenParams.expand_chance)
  return _internal_expand_chance();
}
inline void DungenParams::_internal_set_expand_chance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expand_chance_ = value;
}
inline void DungenParams::set_expand_chance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expand_chance(value);
  // @@protoc_insertion_point(field_set:game.DungenParams.expand_chance)
}

// -------------------------------------------------------------------

// ActionBinds

// repeated .game.ActionBindEntry action_binds = 1;
inline int ActionBinds::_internal_action_binds_size() const {
  return action_binds_.size();
}
inline int ActionBinds::action_binds_size() const {
  return _internal_action_binds_size();
}
inline void ActionBinds::clear_action_binds() {
  action_binds_.Clear();
}
inline ::game::ActionBindEntry* ActionBinds::mutable_action_binds(int index) {
  // @@protoc_insertion_point(field_mutable:game.ActionBinds.action_binds)
  return action_binds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ActionBindEntry >*
ActionBinds::mutable_action_binds() {
  // @@protoc_insertion_point(field_mutable_list:game.ActionBinds.action_binds)
  return &action_binds_;
}
inline const ::game::ActionBindEntry& ActionBinds::_internal_action_binds(int index) const {
  return action_binds_.Get(index);
}
inline const ::game::ActionBindEntry& ActionBinds::action_binds(int index) const {
  // @@protoc_insertion_point(field_get:game.ActionBinds.action_binds)
  return _internal_action_binds(index);
}
inline ::game::ActionBindEntry* ActionBinds::_internal_add_action_binds() {
  return action_binds_.Add();
}
inline ::game::ActionBindEntry* ActionBinds::add_action_binds() {
  ::game::ActionBindEntry* _add = _internal_add_action_binds();
  // @@protoc_insertion_point(field_add:game.ActionBinds.action_binds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ActionBindEntry >&
ActionBinds::action_binds() const {
  // @@protoc_insertion_point(field_list:game.ActionBinds.action_binds)
  return action_binds_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::game::ActionBindEntry_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::ActionBindEntry_Action>() {
  return ::game::ActionBindEntry_Action_descriptor();
}
template <> struct is_proto_enum< ::game::ActionBindEntry_Bind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::ActionBindEntry_Bind>() {
  return ::game::ActionBindEntry_Bind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fgame_2eproto
