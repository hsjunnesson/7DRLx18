// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/game.proto

#include "proto/game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace game {
constexpr ActionBindEntry::ActionBindEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(0)

  , bind_(0)
{}
struct ActionBindEntryDefaultTypeInternal {
  constexpr ActionBindEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionBindEntryDefaultTypeInternal() {}
  union {
    ActionBindEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionBindEntryDefaultTypeInternal _ActionBindEntry_default_instance_;
constexpr GameParams::GameParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_atlas_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dungen_params_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , room_templates_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mob_templates_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tilesize_(0){}
struct GameParamsDefaultTypeInternal {
  constexpr GameParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameParamsDefaultTypeInternal() {}
  union {
    GameParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameParamsDefaultTypeInternal _GameParams_default_instance_;
constexpr DungenParams::DungenParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : room_count_(0)
  , map_width_(0)
  , map_height_(0)
  , expand_chance_(0){}
struct DungenParamsDefaultTypeInternal {
  constexpr DungenParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DungenParamsDefaultTypeInternal() {}
  union {
    DungenParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DungenParamsDefaultTypeInternal _DungenParams_default_instance_;
constexpr ActionBinds::ActionBinds(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_binds_(){}
struct ActionBindsDefaultTypeInternal {
  constexpr ActionBindsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionBindsDefaultTypeInternal() {}
  union {
    ActionBinds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionBindsDefaultTypeInternal _ActionBinds_default_instance_;
}  // namespace game
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fgame_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fgame_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fgame_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fgame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::ActionBindEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::ActionBindEntry, action_),
  PROTOBUF_FIELD_OFFSET(::game::ActionBindEntry, bind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::GameParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::GameParams, game_atlas_filename_),
  PROTOBUF_FIELD_OFFSET(::game::GameParams, dungen_params_filename_),
  PROTOBUF_FIELD_OFFSET(::game::GameParams, room_templates_filename_),
  PROTOBUF_FIELD_OFFSET(::game::GameParams, mob_templates_filename_),
  PROTOBUF_FIELD_OFFSET(::game::GameParams, tilesize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::DungenParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::DungenParams, room_count_),
  PROTOBUF_FIELD_OFFSET(::game::DungenParams, map_width_),
  PROTOBUF_FIELD_OFFSET(::game::DungenParams, map_height_),
  PROTOBUF_FIELD_OFFSET(::game::DungenParams, expand_chance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::ActionBinds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::ActionBinds, action_binds_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::ActionBindEntry)},
  { 8, -1, -1, sizeof(::game::GameParams)},
  { 19, -1, -1, sizeof(::game::DungenParams)},
  { 29, -1, -1, sizeof(::game::ActionBinds)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_ActionBindEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_GameParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_DungenParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_ActionBinds_default_instance_),
};

const char descriptor_table_protodef_proto_2fgame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020proto/game.proto\022\004game\"\242\020\n\017ActionBindE"
  "ntry\022,\n\006action\030\001 \001(\0162\034.game.ActionBindEn"
  "try.Action\022(\n\004bind\030\002 \001(\0162\032.game.ActionBi"
  "ndEntry.Bind\"\315\001\n\006Action\022\022\n\016ACTION_UNKNOW"
  "N\020\000\022\010\n\004QUIT\020\001\022\010\n\004MENU\020\002\022\n\n\006EDITOR\020\003\022\n\n\006M"
  "OVE_N\020\004\022\013\n\007MOVE_NE\020\005\022\n\n\006MOVE_E\020\006\022\013\n\007MOVE"
  "_SE\020\007\022\n\n\006MOVE_S\020\010\022\013\n\007MOVE_SW\020\t\022\n\n\006MOVE_W"
  "\020\n\022\013\n\007MOVE_NW\020\013\022\014\n\010INTERACT\020\014\022\010\n\004WAIT\020\r\022"
  "\023\n\017SHOW_IMGUI_DEMO\020c\"\346\r\n\004Bind\022\020\n\014BIND_UN"
  "KNOWN\020\000\022\r\n\tKEY_SPACE\020 \022\022\n\016KEY_APOSTROPHE"
  "\020\'\022\r\n\tKEY_COMMA\020,\022\r\n\tKEY_MINUS\020-\022\016\n\nKEY_"
  "PERIOD\020.\022\r\n\tKEY_SLASH\020/\022\t\n\005KEY_0\0200\022\t\n\005KE"
  "Y_1\0201\022\t\n\005KEY_2\0202\022\t\n\005KEY_3\0203\022\t\n\005KEY_4\0204\022\t"
  "\n\005KEY_5\0205\022\t\n\005KEY_6\0206\022\t\n\005KEY_7\0207\022\t\n\005KEY_8"
  "\0208\022\t\n\005KEY_9\0209\022\021\n\rKEY_SEMICOLON\020;\022\r\n\tKEY_"
  "EQUAL\020=\022\t\n\005KEY_A\020A\022\t\n\005KEY_B\020B\022\t\n\005KEY_C\020C"
  "\022\t\n\005KEY_D\020D\022\t\n\005KEY_E\020E\022\t\n\005KEY_F\020F\022\t\n\005KEY"
  "_G\020G\022\t\n\005KEY_H\020H\022\t\n\005KEY_I\020I\022\t\n\005KEY_J\020J\022\t\n"
  "\005KEY_K\020K\022\t\n\005KEY_L\020L\022\t\n\005KEY_M\020M\022\t\n\005KEY_N\020"
  "N\022\t\n\005KEY_O\020O\022\t\n\005KEY_P\020P\022\t\n\005KEY_Q\020Q\022\t\n\005KE"
  "Y_R\020R\022\t\n\005KEY_S\020S\022\t\n\005KEY_T\020T\022\t\n\005KEY_U\020U\022\t"
  "\n\005KEY_V\020V\022\t\n\005KEY_W\020W\022\t\n\005KEY_X\020X\022\t\n\005KEY_Y"
  "\020Y\022\t\n\005KEY_Z\020Z\022\024\n\020KEY_LEFT_BRACKET\020[\022\021\n\rK"
  "EY_BACKSLASH\020\\\022\025\n\021KEY_RIGHT_BRACKET\020]\022\024\n"
  "\020KEY_GRAVE_ACCENT\020`\022\017\n\nKEY_ESCAPE\020\200\002\022\016\n\t"
  "KEY_ENTER\020\201\002\022\014\n\007KEY_TAB\020\202\002\022\022\n\rKEY_BACKSP"
  "ACE\020\203\002\022\017\n\nKEY_INSERT\020\204\002\022\017\n\nKEY_DELETE\020\205\002"
  "\022\016\n\tKEY_RIGHT\020\206\002\022\r\n\010KEY_LEFT\020\207\002\022\r\n\010KEY_D"
  "OWN\020\210\002\022\013\n\006KEY_UP\020\211\002\022\020\n\013KEY_PAGE_UP\020\212\002\022\022\n"
  "\rKEY_PAGE_DOWN\020\213\002\022\r\n\010KEY_HOME\020\214\002\022\014\n\007KEY_"
  "END\020\215\002\022\022\n\rKEY_CAPS_LOCK\020\230\002\022\024\n\017KEY_SCROLL"
  "_LOCK\020\231\002\022\021\n\014KEY_NUM_LOCK\020\232\002\022\025\n\020KEY_PRINT"
  "_SCREEN\020\233\002\022\016\n\tKEY_PAUSE\020\234\002\022\013\n\006KEY_F1\020\242\002\022"
  "\013\n\006KEY_F2\020\243\002\022\013\n\006KEY_F3\020\244\002\022\013\n\006KEY_F4\020\245\002\022\013"
  "\n\006KEY_F5\020\246\002\022\013\n\006KEY_F6\020\247\002\022\013\n\006KEY_F7\020\250\002\022\013\n"
  "\006KEY_F8\020\251\002\022\013\n\006KEY_F9\020\252\002\022\014\n\007KEY_F10\020\253\002\022\014\n"
  "\007KEY_F11\020\254\002\022\014\n\007KEY_F12\020\255\002\022\014\n\007KEY_F13\020\256\002\022"
  "\014\n\007KEY_F14\020\257\002\022\014\n\007KEY_F15\020\260\002\022\014\n\007KEY_F16\020\261"
  "\002\022\014\n\007KEY_F17\020\262\002\022\014\n\007KEY_F18\020\263\002\022\014\n\007KEY_F19"
  "\020\264\002\022\014\n\007KEY_F20\020\265\002\022\014\n\007KEY_F21\020\266\002\022\014\n\007KEY_F"
  "22\020\267\002\022\014\n\007KEY_F23\020\270\002\022\014\n\007KEY_F24\020\271\002\022\014\n\007KEY"
  "_F25\020\272\002\022\r\n\010KEY_KP_0\020\300\002\022\r\n\010KEY_KP_1\020\301\002\022\r\n"
  "\010KEY_KP_2\020\302\002\022\r\n\010KEY_KP_3\020\303\002\022\r\n\010KEY_KP_4\020"
  "\304\002\022\r\n\010KEY_KP_5\020\305\002\022\r\n\010KEY_KP_6\020\306\002\022\r\n\010KEY_"
  "KP_7\020\307\002\022\r\n\010KEY_KP_8\020\310\002\022\r\n\010KEY_KP_9\020\311\002\022\023\n"
  "\016KEY_KP_DECIMAL\020\312\002\022\022\n\rKEY_KP_DIVIDE\020\313\002\022\024"
  "\n\017KEY_KP_MULTIPLY\020\314\002\022\024\n\017KEY_KP_SUBTRACT\020"
  "\315\002\022\017\n\nKEY_KP_ADD\020\316\002\022\021\n\014KEY_KP_ENTER\020\317\002\022\021"
  "\n\014KEY_KP_EQUAL\020\320\002\022\023\n\016KEY_LEFT_SHIFT\020\324\002\022\025"
  "\n\020KEY_LEFT_CONTROL\020\325\002\022\021\n\014KEY_LEFT_ALT\020\326\002"
  "\022\023\n\016KEY_LEFT_SUPER\020\327\002\022\024\n\017KEY_RIGHT_SHIFT"
  "\020\330\002\022\026\n\021KEY_RIGHT_CONTROL\020\331\002\022\022\n\rKEY_RIGHT"
  "_ALT\020\332\002\022\024\n\017KEY_RIGHT_SUPER\020\333\002\"\234\001\n\nGamePa"
  "rams\022\033\n\023game_atlas_filename\030\001 \001(\t\022\036\n\026dun"
  "gen_params_filename\030\002 \001(\t\022\037\n\027room_templa"
  "tes_filename\030\003 \001(\t\022\036\n\026mob_templates_file"
  "name\030\004 \001(\t\022\020\n\010tilesize\030\n \001(\005\"`\n\014DungenPa"
  "rams\022\022\n\nroom_count\030\001 \001(\005\022\021\n\tmap_width\030\002 "
  "\001(\005\022\022\n\nmap_height\030\003 \001(\005\022\025\n\rexpand_chance"
  "\030\004 \001(\005\":\n\013ActionBinds\022+\n\014action_binds\030\001 "
  "\003(\0132\025.game.ActionBindEntryb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fgame_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fgame_2eproto = {
  false, false, 2434, descriptor_table_protodef_proto_2fgame_2eproto, "proto/game.proto", 
  &descriptor_table_proto_2fgame_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_proto_2fgame_2eproto::offsets,
  file_level_metadata_proto_2fgame_2eproto, file_level_enum_descriptors_proto_2fgame_2eproto, file_level_service_descriptors_proto_2fgame_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fgame_2eproto_getter() {
  return &descriptor_table_proto_2fgame_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fgame_2eproto(&descriptor_table_proto_2fgame_2eproto);
namespace game {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionBindEntry_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fgame_2eproto);
  return file_level_enum_descriptors_proto_2fgame_2eproto[0];
}
bool ActionBindEntry_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 99:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ActionBindEntry_Action ActionBindEntry::ACTION_UNKNOWN;
constexpr ActionBindEntry_Action ActionBindEntry::QUIT;
constexpr ActionBindEntry_Action ActionBindEntry::MENU;
constexpr ActionBindEntry_Action ActionBindEntry::EDITOR;
constexpr ActionBindEntry_Action ActionBindEntry::MOVE_N;
constexpr ActionBindEntry_Action ActionBindEntry::MOVE_NE;
constexpr ActionBindEntry_Action ActionBindEntry::MOVE_E;
constexpr ActionBindEntry_Action ActionBindEntry::MOVE_SE;
constexpr ActionBindEntry_Action ActionBindEntry::MOVE_S;
constexpr ActionBindEntry_Action ActionBindEntry::MOVE_SW;
constexpr ActionBindEntry_Action ActionBindEntry::MOVE_W;
constexpr ActionBindEntry_Action ActionBindEntry::MOVE_NW;
constexpr ActionBindEntry_Action ActionBindEntry::INTERACT;
constexpr ActionBindEntry_Action ActionBindEntry::WAIT;
constexpr ActionBindEntry_Action ActionBindEntry::SHOW_IMGUI_DEMO;
constexpr ActionBindEntry_Action ActionBindEntry::Action_MIN;
constexpr ActionBindEntry_Action ActionBindEntry::Action_MAX;
constexpr int ActionBindEntry::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionBindEntry_Bind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fgame_2eproto);
  return file_level_enum_descriptors_proto_2fgame_2eproto[1];
}
bool ActionBindEntry_Bind_IsValid(int value) {
  switch (value) {
    case 0:
    case 32:
    case 39:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 59:
    case 61:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 96:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ActionBindEntry_Bind ActionBindEntry::BIND_UNKNOWN;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_SPACE;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_APOSTROPHE;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_COMMA;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_MINUS;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_PERIOD;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_SLASH;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_0;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_1;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_2;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_3;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_4;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_5;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_6;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_7;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_8;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_9;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_SEMICOLON;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_EQUAL;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_A;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_B;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_C;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_D;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_E;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_G;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_H;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_I;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_J;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_K;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_L;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_M;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_N;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_O;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_P;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_Q;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_R;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_S;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_T;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_U;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_V;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_W;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_X;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_Y;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_Z;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_LEFT_BRACKET;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_BACKSLASH;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_RIGHT_BRACKET;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_GRAVE_ACCENT;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_ESCAPE;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_ENTER;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_TAB;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_BACKSPACE;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_INSERT;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_DELETE;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_RIGHT;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_LEFT;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_DOWN;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_UP;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_PAGE_UP;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_PAGE_DOWN;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_HOME;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_END;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_CAPS_LOCK;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_SCROLL_LOCK;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_NUM_LOCK;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_PRINT_SCREEN;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_PAUSE;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F1;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F2;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F3;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F4;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F5;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F6;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F7;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F8;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F9;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F10;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F11;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F12;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F13;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F14;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F15;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F16;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F17;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F18;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F19;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F20;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F21;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F22;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F23;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F24;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_F25;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_0;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_1;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_2;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_3;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_4;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_5;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_6;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_7;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_8;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_9;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_DECIMAL;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_DIVIDE;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_MULTIPLY;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_SUBTRACT;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_ADD;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_ENTER;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_KP_EQUAL;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_LEFT_SHIFT;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_LEFT_CONTROL;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_LEFT_ALT;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_LEFT_SUPER;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_RIGHT_SHIFT;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_RIGHT_CONTROL;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_RIGHT_ALT;
constexpr ActionBindEntry_Bind ActionBindEntry::KEY_RIGHT_SUPER;
constexpr ActionBindEntry_Bind ActionBindEntry::Bind_MIN;
constexpr ActionBindEntry_Bind ActionBindEntry::Bind_MAX;
constexpr int ActionBindEntry::Bind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ActionBindEntry::_Internal {
 public:
};

ActionBindEntry::ActionBindEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:game.ActionBindEntry)
}
ActionBindEntry::ActionBindEntry(const ActionBindEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&bind_) -
    reinterpret_cast<char*>(&action_)) + sizeof(bind_));
  // @@protoc_insertion_point(copy_constructor:game.ActionBindEntry)
}

void ActionBindEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bind_) -
    reinterpret_cast<char*>(&action_)) + sizeof(bind_));
}

ActionBindEntry::~ActionBindEntry() {
  // @@protoc_insertion_point(destructor:game.ActionBindEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionBindEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionBindEntry::ArenaDtor(void* object) {
  ActionBindEntry* _this = reinterpret_cast< ActionBindEntry* >(object);
  (void)_this;
}
void ActionBindEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionBindEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionBindEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:game.ActionBindEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bind_) -
      reinterpret_cast<char*>(&action_)) + sizeof(bind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionBindEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.ActionBindEntry.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::game::ActionBindEntry_Action>(val));
        } else
          goto handle_unusual;
        continue;
      // .game.ActionBindEntry.Bind bind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bind(static_cast<::game::ActionBindEntry_Bind>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionBindEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.ActionBindEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.ActionBindEntry.Action action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // .game.ActionBindEntry.Bind bind = 2;
  if (this->_internal_bind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_bind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.ActionBindEntry)
  return target;
}

size_t ActionBindEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.ActionBindEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.ActionBindEntry.Action action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  // .game.ActionBindEntry.Bind bind = 2;
  if (this->_internal_bind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionBindEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionBindEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionBindEntry::GetClassData() const { return &_class_data_; }

void ActionBindEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionBindEntry *>(to)->MergeFrom(
      static_cast<const ActionBindEntry &>(from));
}


void ActionBindEntry::MergeFrom(const ActionBindEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.ActionBindEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_bind() != 0) {
    _internal_set_bind(from._internal_bind());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionBindEntry::CopyFrom(const ActionBindEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.ActionBindEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionBindEntry::IsInitialized() const {
  return true;
}

void ActionBindEntry::InternalSwap(ActionBindEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionBindEntry, bind_)
      + sizeof(ActionBindEntry::bind_)
      - PROTOBUF_FIELD_OFFSET(ActionBindEntry, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionBindEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[0]);
}

// ===================================================================

class GameParams::_Internal {
 public:
};

GameParams::GameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:game.GameParams)
}
GameParams::GameParams(const GameParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_atlas_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_atlas_filename().empty()) {
    game_atlas_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_atlas_filename(), 
      GetArenaForAllocation());
  }
  dungen_params_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dungen_params_filename().empty()) {
    dungen_params_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dungen_params_filename(), 
      GetArenaForAllocation());
  }
  room_templates_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_templates_filename().empty()) {
    room_templates_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_templates_filename(), 
      GetArenaForAllocation());
  }
  mob_templates_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mob_templates_filename().empty()) {
    mob_templates_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mob_templates_filename(), 
      GetArenaForAllocation());
  }
  tilesize_ = from.tilesize_;
  // @@protoc_insertion_point(copy_constructor:game.GameParams)
}

void GameParams::SharedCtor() {
game_atlas_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dungen_params_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
room_templates_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mob_templates_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tilesize_ = 0;
}

GameParams::~GameParams() {
  // @@protoc_insertion_point(destructor:game.GameParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  game_atlas_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dungen_params_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_templates_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mob_templates_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameParams::ArenaDtor(void* object) {
  GameParams* _this = reinterpret_cast< GameParams* >(object);
  (void)_this;
}
void GameParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameParams::Clear() {
// @@protoc_insertion_point(message_clear_start:game.GameParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_atlas_filename_.ClearToEmpty();
  dungen_params_filename_.ClearToEmpty();
  room_templates_filename_.ClearToEmpty();
  mob_templates_filename_.ClearToEmpty();
  tilesize_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string game_atlas_filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_game_atlas_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.GameParams.game_atlas_filename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dungen_params_filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dungen_params_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.GameParams.dungen_params_filename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_templates_filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_room_templates_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.GameParams.room_templates_filename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mob_templates_filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mob_templates_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.GameParams.mob_templates_filename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tilesize = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          tilesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.GameParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string game_atlas_filename = 1;
  if (!this->_internal_game_atlas_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_atlas_filename().data(), static_cast<int>(this->_internal_game_atlas_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.GameParams.game_atlas_filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_game_atlas_filename(), target);
  }

  // string dungen_params_filename = 2;
  if (!this->_internal_dungen_params_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dungen_params_filename().data(), static_cast<int>(this->_internal_dungen_params_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.GameParams.dungen_params_filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dungen_params_filename(), target);
  }

  // string room_templates_filename = 3;
  if (!this->_internal_room_templates_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_templates_filename().data(), static_cast<int>(this->_internal_room_templates_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.GameParams.room_templates_filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_room_templates_filename(), target);
  }

  // string mob_templates_filename = 4;
  if (!this->_internal_mob_templates_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mob_templates_filename().data(), static_cast<int>(this->_internal_mob_templates_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.GameParams.mob_templates_filename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mob_templates_filename(), target);
  }

  // int32 tilesize = 10;
  if (this->_internal_tilesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_tilesize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.GameParams)
  return target;
}

size_t GameParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.GameParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string game_atlas_filename = 1;
  if (!this->_internal_game_atlas_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_atlas_filename());
  }

  // string dungen_params_filename = 2;
  if (!this->_internal_dungen_params_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dungen_params_filename());
  }

  // string room_templates_filename = 3;
  if (!this->_internal_room_templates_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_templates_filename());
  }

  // string mob_templates_filename = 4;
  if (!this->_internal_mob_templates_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mob_templates_filename());
  }

  // int32 tilesize = 10;
  if (this->_internal_tilesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tilesize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameParams::GetClassData() const { return &_class_data_; }

void GameParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameParams *>(to)->MergeFrom(
      static_cast<const GameParams &>(from));
}


void GameParams::MergeFrom(const GameParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.GameParams)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_game_atlas_filename().empty()) {
    _internal_set_game_atlas_filename(from._internal_game_atlas_filename());
  }
  if (!from._internal_dungen_params_filename().empty()) {
    _internal_set_dungen_params_filename(from._internal_dungen_params_filename());
  }
  if (!from._internal_room_templates_filename().empty()) {
    _internal_set_room_templates_filename(from._internal_room_templates_filename());
  }
  if (!from._internal_mob_templates_filename().empty()) {
    _internal_set_mob_templates_filename(from._internal_mob_templates_filename());
  }
  if (from._internal_tilesize() != 0) {
    _internal_set_tilesize(from._internal_tilesize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameParams::CopyFrom(const GameParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.GameParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameParams::IsInitialized() const {
  return true;
}

void GameParams::InternalSwap(GameParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_atlas_filename_, lhs_arena,
      &other->game_atlas_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dungen_params_filename_, lhs_arena,
      &other->dungen_params_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_templates_filename_, lhs_arena,
      &other->room_templates_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mob_templates_filename_, lhs_arena,
      &other->mob_templates_filename_, rhs_arena
  );
  swap(tilesize_, other->tilesize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[1]);
}

// ===================================================================

class DungenParams::_Internal {
 public:
};

DungenParams::DungenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:game.DungenParams)
}
DungenParams::DungenParams(const DungenParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&room_count_, &from.room_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&expand_chance_) -
    reinterpret_cast<char*>(&room_count_)) + sizeof(expand_chance_));
  // @@protoc_insertion_point(copy_constructor:game.DungenParams)
}

void DungenParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&room_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expand_chance_) -
    reinterpret_cast<char*>(&room_count_)) + sizeof(expand_chance_));
}

DungenParams::~DungenParams() {
  // @@protoc_insertion_point(destructor:game.DungenParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DungenParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DungenParams::ArenaDtor(void* object) {
  DungenParams* _this = reinterpret_cast< DungenParams* >(object);
  (void)_this;
}
void DungenParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DungenParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DungenParams::Clear() {
// @@protoc_insertion_point(message_clear_start:game.DungenParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&room_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expand_chance_) -
      reinterpret_cast<char*>(&room_count_)) + sizeof(expand_chance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DungenParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 room_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          room_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          map_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          map_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 expand_chance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expand_chance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DungenParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.DungenParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_count = 1;
  if (this->_internal_room_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_room_count(), target);
  }

  // int32 map_width = 2;
  if (this->_internal_map_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_width(), target);
  }

  // int32 map_height = 3;
  if (this->_internal_map_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_map_height(), target);
  }

  // int32 expand_chance = 4;
  if (this->_internal_expand_chance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_expand_chance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.DungenParams)
  return target;
}

size_t DungenParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.DungenParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 room_count = 1;
  if (this->_internal_room_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_room_count());
  }

  // int32 map_width = 2;
  if (this->_internal_map_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_map_width());
  }

  // int32 map_height = 3;
  if (this->_internal_map_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_map_height());
  }

  // int32 expand_chance = 4;
  if (this->_internal_expand_chance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_expand_chance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DungenParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DungenParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DungenParams::GetClassData() const { return &_class_data_; }

void DungenParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DungenParams *>(to)->MergeFrom(
      static_cast<const DungenParams &>(from));
}


void DungenParams::MergeFrom(const DungenParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.DungenParams)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_room_count() != 0) {
    _internal_set_room_count(from._internal_room_count());
  }
  if (from._internal_map_width() != 0) {
    _internal_set_map_width(from._internal_map_width());
  }
  if (from._internal_map_height() != 0) {
    _internal_set_map_height(from._internal_map_height());
  }
  if (from._internal_expand_chance() != 0) {
    _internal_set_expand_chance(from._internal_expand_chance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DungenParams::CopyFrom(const DungenParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.DungenParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungenParams::IsInitialized() const {
  return true;
}

void DungenParams::InternalSwap(DungenParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DungenParams, expand_chance_)
      + sizeof(DungenParams::expand_chance_)
      - PROTOBUF_FIELD_OFFSET(DungenParams, room_count_)>(
          reinterpret_cast<char*>(&room_count_),
          reinterpret_cast<char*>(&other->room_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DungenParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[2]);
}

// ===================================================================

class ActionBinds::_Internal {
 public:
};

ActionBinds::ActionBinds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  action_binds_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:game.ActionBinds)
}
ActionBinds::ActionBinds(const ActionBinds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      action_binds_(from.action_binds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.ActionBinds)
}

void ActionBinds::SharedCtor() {
}

ActionBinds::~ActionBinds() {
  // @@protoc_insertion_point(destructor:game.ActionBinds)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionBinds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionBinds::ArenaDtor(void* object) {
  ActionBinds* _this = reinterpret_cast< ActionBinds* >(object);
  (void)_this;
}
void ActionBinds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionBinds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionBinds::Clear() {
// @@protoc_insertion_point(message_clear_start:game.ActionBinds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_binds_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionBinds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.ActionBindEntry action_binds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_binds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionBinds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.ActionBinds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.ActionBindEntry action_binds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_action_binds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_action_binds(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.ActionBinds)
  return target;
}

size_t ActionBinds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.ActionBinds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.ActionBindEntry action_binds = 1;
  total_size += 1UL * this->_internal_action_binds_size();
  for (const auto& msg : this->action_binds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionBinds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionBinds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionBinds::GetClassData() const { return &_class_data_; }

void ActionBinds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionBinds *>(to)->MergeFrom(
      static_cast<const ActionBinds &>(from));
}


void ActionBinds::MergeFrom(const ActionBinds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.ActionBinds)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  action_binds_.MergeFrom(from.action_binds_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionBinds::CopyFrom(const ActionBinds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.ActionBinds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionBinds::IsInitialized() const {
  return true;
}

void ActionBinds::InternalSwap(ActionBinds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  action_binds_.InternalSwap(&other->action_binds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionBinds::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::ActionBindEntry* Arena::CreateMaybeMessage< ::game::ActionBindEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::ActionBindEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::game::GameParams* Arena::CreateMaybeMessage< ::game::GameParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::GameParams >(arena);
}
template<> PROTOBUF_NOINLINE ::game::DungenParams* Arena::CreateMaybeMessage< ::game::DungenParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::DungenParams >(arena);
}
template<> PROTOBUF_NOINLINE ::game::ActionBinds* Arena::CreateMaybeMessage< ::game::ActionBinds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::ActionBinds >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
